// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Define a contract 'Supplychain'
contract BookSupplyChain {

    // Define 'owner'
    address owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    string isbn;
    uint nonce;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Book) books;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) booksHistory;
  
    // Define enum 'State' with the following values:
    enum State { 
        Written,    // 0 
        Published,  // 1
        Packed,     // 2
        ForSale,    // 3
        Sold,       // 4
        Shipped,    // 5
        Received,   // 6
        Purchased   // 7
    }

    State constant defaultState = State.Published;

    // Define a struct 'Item' with the following fields:
    struct Book {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        string isbn;
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address authorId; 
        string  authorName; 
        string genre;
        string language;
        string country;
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   bookState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Written(uint upc);
    event Published(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address); 
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price); 
        _;
    }
    
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = books[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        books[_upc].consumerID.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier written(uint _upc) {
        require(books[_upc].bookState == State.Written);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier published(uint _upc) {
        require(books[_upc].bookState == State.Published);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(books[_upc].bookState == State.Packed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(books[_upc].bookState == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(books[_upc].bookState == State.Sold);
        _;
    }
    
    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(books[_upc].bookState == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(books[_upc].bookState == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(books[_upc].bookState == State.Purchased);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
        nonce = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner) {
        selfdestruct(owner);
        }
    }

    // Define a function 'writeBook' that allows a author to mark an item 'Written'
    function writeBook(uint _upc, string memory _isbn, string memory _authorName, 
        string memory _genre, string memory _language, 
        string memory _country, string memory _productNotes) public 
    {
        // Add the new item as part of Written
        Book memory book = Book(
            sku, _upc, _isbn, msg.sender, msg.sender, _authorName,
            _genre, _language, _country, 0, _productNotes,
            10.00, State.Written, address(0), address(0), address(0)
        );

        books[_upc] = book;
        // MIGHT NEED TO FIGURE OUT HOW TO CREATE A TxHash
        // https://ethereum.stackexchange.com/questions/15293/is-it-possible-to-create-a-unique-hash-inside-geth
        bytes32 txHash = sha3(block.number, book, nonce);

        // ADD TRANSACTION TO THE LIST
        booksHistory[_upc].push(txHash);

        // Increment sku
        sku = sku + 1;
        nonce = nonce + 1;
        // Emit the appropriate event
        emit Written(_upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function publishBook(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
        written
    // Call modifier to verify caller of this function
        verifyCaller
    {
        // Update the appropriate fields
        Book memory book = books[_upc];
        book.ownerID = msg.sender;
        book.bookState = State.Published;

        bytes32 txHash = sha3(block.number, book, nonce);
        books[_upc] = book;
        booksHistory[_upc].push(txHash);

        nonce += 1;
        // Emit the appropriate event
        emit Published(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
        published 
    // Call modifier to verify caller of this function
        verifyCaller 
    {
        // Update the appropriate fields
        Book memory book = books[_upc];
        book.ownerID = msg.sender;
        book.bookState = State.Packed;

        bytes32 txHash = sha3(block.number, book, nonce);
        books[_upc] = book;
        booksHistory[_upc].push(txHash);

        nonce += 1;
        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public 
    // Call modifier to check if upc has passed previous supply chain stage
        packed 
    // Call modifier to verify caller of this function
        verifyCaller
    {
        // Update the appropriate fields
        Book memory book = books[_upc];
        book.ownerID = msg.sender;
        book.bookState = State.ForSale;

        bytes32 txHash = sha3(block.number, book, nonce);
        books[_upc] = book;
        booksHistory[_upc].push(txHash);

        nonce += 1;
        // Emit the appropriate event
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc) public payable 
        // Call modifier to check if upc has passed previous supply chain stage
        forSale 
        // Call modifer to check if buyer has paid enough
        paidEnough
        // Call modifer to send any excess ether back to buyer
        checkValue
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        Book memory book = books[_upc];
        book.ownerID = msg.sender;
        book.retailerID = msg.sender;
        book.bookState = State.Sold;

        bytes32 txHash = sha3(block.number, book, nonce);
        books[_upc] = book;
        booksHistory[_upc].push(txHash);

        nonce += 1;

        // Transfer money to farmer
        payable(msg.sender).transfer(book.authorId);

        // emit the appropriate event
        emit Sold(_upc);
    }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
        sold 
    // Call modifier to verify caller of this function
        verifyCaller  
    {
        // Update the appropriate fields
            Book memory book = books[_upc];
            book.ownerID = msg.sender;
            book.bookState = State.Sold;   

            bytes32 txHash = sha3(block.number, book, nonce);
            books[_upc] = book;
            booksHistory[_upc].push(txHash);

            nonce += 1;

        // Emit the appropriate event
        emit Shipped(_upc);
  }












  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
        shipped 
    // Access Control List enforced by calling Smart Contract / DApp
    //  TODO:
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    
    // Emit the appropriate event
    
  }











  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    
    // Emit the appropriate event
    
  }











  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }
















  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}